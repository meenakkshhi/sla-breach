import React, { useState } from 'react';
import { Search, Filter, AlertTriangle, Clock, CheckCircle, Eye } from 'lucide-react';

const TicketList = () => {
const [searchTerm, setSearchTerm] = useState('');
const [filterStatus, setFilterStatus] = useState('all');

const tickets = [
{
id: '#2456',
title: 'Database connectivity issues causing application timeouts',
description: 'Users unable to access customer portal due to database connection failures',
priority: 'High',
status: 'In Progress',
risk: 'high',
riskScore: 85,
assignee: 'Sarah Johnson',
created: '2024-01-15 09:30',
slaDeadline: '2024-01-15 13:30',
category: 'Infrastructure'
},
{
id: '#2455',
title: 'Email server configuration update required',
description: 'SMTP configuration needs updating for new security protocols',
priority: 'Medium',
status: 'Open',
risk: 'medium',
riskScore: 62,
assignee: 'Mike Chen',
created: '2024-01-15 08:45',
slaDeadline: '2024-01-16 08:45',
category: 'Infrastructure'
},
{
id: '#2454',
title: 'User account access request for new employee',
description: 'New hire needs access to CRM and project management tools',
priority: 'Low',
status: 'Resolved',
risk: 'low',
riskScore: 15,
assignee: 'Lisa Park',
created: '2024-01-14 14:20',
slaDeadline: '2024-01-17 14:20',
category: 'User Access'
},
{
id: '#2453',
title: 'Application deployment failure in production environment',
description: 'Latest release failed to deploy causing service interruption',
priority: 'High',
status: 'In Progress',
risk: 'high',
riskScore: 92,
assignee: 'David Kim',
created: '2024-01-15 11:15',
slaDeadline: '2024-01-15 15:15',
category: 'Application'
},
{
id: '#2452',
title: 'Network latency optimization for remote offices',
description: 'Users experiencing slow response times from main applications',
priority: 'Medium',
status: 'Open',
risk: 'medium',
riskScore: 48,
assignee: 'Emma Wilson',
created: '2024-01-15 07:30',
slaDeadline: '2024-01-16 07:30',
category: 'Network'
},
{
id: '#2451',
title: 'Security certificate renewal for web applications',
description: 'SSL certificates expiring soon, need immediate renewal',
priority: 'High',
status: 'Open',
risk: 'high',
riskScore: 78,
assignee: 'Unassigned',
created: '2024-01-15 06:00',
slaDeadline: '2024-01-15 18:00',
category: 'Security'
}
];

const getStatusBadge = (status: string) => {
const classes = {
'Open': 'bg-blue-100 text-blue-800',
'In Progress': 'bg-yellow-100 text-yellow-800',
'Resolved': 'bg-green-100 text-green-800',
'Closed': 'bg-gray-100 text-gray-800'
};

return (
<span className={`px-2 py-1 text-xs font-medium rounded-full ${classes[status as keyof typeof classes]}`}>
{status}
</span>
);
};

const getRiskBadge = (risk: string, score: number) => {
const classes = {
high: 'bg-red-100 text-red-800 border-red-200',
medium: 'bg-amber-100 text-amber-800 border-amber-200',
low: 'bg-green-100 text-green-800 border-green-200'
};

return (
<div className={`px-3 py-1 text-xs font-medium rounded-lg border ${classes[risk as keyof typeof classes]}`}>
{score}% Risk
</div>
);
};

const getRiskIcon = (risk: string) => {
switch (risk) {
case 'high':
return <AlertTriangle className="w-4 h-4 text-red-500" />;
case 'medium':
return <Clock className="w-4 h-4 text-amber-500" />;
default:
return <CheckCircle className="w-4 h-4 text-green-500" />;
}
};

const getPriorityColor = (priority: string) => {
switch (priority) {
case 'High':
return 'text-red-600';
case 'Medium':
return 'text-amber-600';
default:
return 'text-green-600';
}
};

const filteredTickets = tickets.filter(ticket => {
const matchesSearch = ticket.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
ticket.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
ticket.assignee.toLowerCase().includes(searchTerm.toLowerCase());

const matchesFilter = filterStatus === 'all' || ticket.status.toLowerCase() === filterStatus.toLowerCase();

return matchesSearch && matchesFilter;
});

return (
<div className="space-y-6">
<div>
<h2 className="text-2xl font-bold text-gray-900">Ticket Management</h2>
<p className="text-gray-600 mt-1">Monitor all tickets with real-time SLA breach predictions</p>
</div>

{/* Filters */}
<div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
<div className="flex flex-col sm:flex-row gap-4">
<div className="flex-1 relative">
<Search className="w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
<input
type="text"
placeholder="Search tickets..."
value={searchTerm}
onChange={(e) => setSearchTerm(e.target.value)}
className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
/>
</div>
<div className="flex items-center space-x-2">
<Filter className="w-5 h-5 text-gray-400" />
<select
value={filterStatus}
onChange={(e) => setFilterStatus(e.target.value)}
className="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
>
<option value="all">All Status</option>
<option value="open">Open</option>
<option value="in progress">In Progress</option>
<option value="resolved">Resolved</option>
</select>
</div>
</div>
</div>

{/* Tickets List */}
<div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
<div className="divide-y divide-gray-200">
{filteredTickets.map((ticket, index) => (
<div key={index} className="p-6 hover:bg-gray-50 transition-colors">
<div className="flex items-start justify-between">
<div className="flex-1">
<div className="flex items-center space-x-3 mb-2">
{getRiskIcon(ticket.risk)}
<span className="font-semibold text-gray-900">{ticket.id}</span>
{getStatusBadge(ticket.status)}
<span className={`text-sm font-medium ${getPriorityColor(ticket.priority)}`}>
{ticket.priority} Priority
</span>
</div>

<h3 className="text-lg font-medium text-gray-900 mb-2">{ticket.title}</h3>
<p className="text-gray-600 text-sm mb-4">{ticket.description}</p>

<div className="flex flex-wrap items-center gap-4 text-sm text-gray-500">
<span>Assignee: <span className="font-medium">{ticket.assignee}</span></span>
<span>Category: <span className="font-medium">{ticket.category}</span></span>
<span>Created: <span className="font-medium">{ticket.created}</span></span>
<span>SLA Deadline: <span className="font-medium">{ticket.slaDeadline}</span></span>
</div>
</div>

<div className="flex items-center space-x-4 ml-6">
{getRiskBadge(ticket.risk, ticket.riskScore)}
<button className="text-blue-600 hover:text-blue-700 p-2 hover:bg-blue-50 rounded-lg transition-colors">
<Eye className="w-5 h-5" />
</button>
</div>
</div>
</div>
))}
</div>
</div>

{filteredTickets.length === 0 && (
<div className="text-center py-12">
<Search className="w-12 h-12 text-gray-300 mx-auto mb-4" />
<h3 className="text-lg font-medium text-gray-900 mb-2">No tickets found</h3>
<p className="text-gray-500">Try adjusting your search terms or filters.</p>
</div>
)}
</div>
);
};

export default TicketList;
